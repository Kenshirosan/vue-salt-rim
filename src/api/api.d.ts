/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authenticate user and get a token */
        post: operations["ff0821f3f5e448e9be30bed07cac39a3"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout currently authenticated user */
        post: operations["7faef09646fa779e3f4eb458d4472c75"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new user */
        post: operations["26578afaf886b858f56e5e1b8fc3403b"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/forgot-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request a new user password */
        post: operations["7a6f983e087620ddd905bd4925f83983"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset user password */
        post: operations["5000f083616176e5a4edc804f813aecc"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/verify/{id}/{hash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Confirm user account */
        post: operations["015719985fb92cfb18e9c6a19c82b1db"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show a list of bars
         * @description Show a list of bars user has access to. Includes bars that user has made and bars he is a member of.
         */
        get: operations["8e4aff1910c2f6b973c0bcff7ac77418"];
        put?: never;
        /** Create a new bar */
        post: operations["af500d926f43cd1cd146adc9c46f8e41"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a specific bar */
        get: operations["6e92536f11339d30675019e6e93f9ce4"];
        /** Update a bar */
        put: operations["06fb0f42934fc2cd15b00b25027494d1"];
        post?: never;
        /** Delete a bar */
        delete: operations["dac7d15bfe40981c358d5a52c8a9e31b"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Join a bar via invite code */
        post: operations["825a1e86cd76f3ca07ad2f11ea45f648"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/memberships": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all members of a bar */
        get: operations["7a49e26fb4754edae7aa107fd1e35205"];
        put?: never;
        post?: never;
        /** Leave a bar you are a member of */
        delete: operations["c3986ac9cf5fe6e4090b993e323480ad"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/memberships/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove a member from a bar */
        delete: operations["74df840e62b14107dd9d65b49ed84b27"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Transfer bar ownership */
        post: operations["208f8a6850027fe0ea9f3b304975fa30"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update bar status */
        post: operations["200c1aba9ada2cd66a7d0b7a4ec90a8e"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a list of cocktails */
        get: operations["4400982243630124406e8675b4632a32"];
        put?: never;
        /** Create a new cocktail */
        post: operations["cbc4c3f93b89c16a916c7cc574ca118e"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a specific cocktail */
        get: operations["9286466f1f4b710e7f06c79f947ec7b0"];
        /** Update a specific cocktail */
        put: operations["ca968c657169055c33bc68a1b08b6eaa"];
        post?: never;
        /** Delete a specific cocktail */
        delete: operations["c642d725c11d12c781fbfad353ba7bcb"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}/toggle-favorite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Toggle cocktail as favorite */
        post: operations["89742b5d96b9183518a473d9e640db6e"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}/public-link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a public ID for cocktail */
        post: operations["191e2ca5633e6d5f7c25430fddbbd9c8"];
        /** Delete cocktail public link */
        delete: operations["a4a90713002827189fef279434f86791"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}/share": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Share a cocktail */
        get: operations["c2af4839cdc102afb67b7be674895e8c"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}/similar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show similar cocktails */
        get: operations["3e08ff7e8e549570aadbaf5b727eaa2a"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}/copy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Copy cocktail */
        post: operations["d7c826954ef1111d8a897c62e27df861"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktail-methods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a list of all methods */
        get: operations["14008654b6c5780b9e826e4e2fcf237a"];
        put?: never;
        /** Create a new method */
        post: operations["4b70b5048cbee429f002bf3f270c8a94"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktail-methods/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a single method */
        get: operations["f1714d10fa6232a1cc65c88929b26bb8"];
        /** Update a specific method */
        put: operations["7507b8dac0ec7199fc2c229a2c127a4e"];
        post?: never;
        /** Delete specific method */
        delete: operations["42b0ceafc9fa786c4984ff1508868ec3"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a list of collections */
        get: operations["308d0156539f4be8f650f7ed64ed3d7f"];
        put?: never;
        /** Create a new collection */
        post: operations["a2c6fd135d182cbeeadbc042b35b0a80"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List bar shared collections */
        get: operations["a15fa7e1679d8b4eafed56112a63da76"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collections/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a specific collection */
        get: operations["621b31f704cec7566d650351f0907df6"];
        /** Update a specific collection */
        put: operations["7497163b1fe8e97bae47a3904200722a"];
        post?: never;
        /** Delete a specific collection */
        delete: operations["00390f2c5b043adc54cc72165bc3eccb"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collections/{id}/cocktails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Sync cocktails in a collection
         * @description Used to updated/add/delete cocktails in a collection. To delete all cocktails pass an empty array.
         */
        put: operations["934e63129e4bf90dd91eccc108f51f40"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/explore/cocktails/{public_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a public cocktail */
        get: operations["83841be3da52f7694d8382c5f5b13d8e"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/exports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a list of exports */
        get: operations["5bc2aea6bb7fb81d2a426faccbb4b4d7"];
        put?: never;
        /** Create a new export */
        post: operations["1bedc78fd0edd24fdcc408977166e8cb"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/exports/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete export */
        delete: operations["6566cf7c2310f6d0f77d6be65bb36868"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/exports/{id}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download export */
        get: operations["df14ed9175061d3560c934ca7c89b47a"];
        put?: never;
        /**
         * Generate download link
         * @description Generates a publicly accessible download link for the export. The link will be valid for 1 minute by default.
         */
        post: operations["48e1c2637c22de5ec50f90272526b454"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/glasses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a list of glass types */
        get: operations["aa68a5da541be756aa65f07353e63cdf"];
        put?: never;
        /** Create a new glass */
        post: operations["b81ce1bc5d5988d9221774a715a90950"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/glasses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show glass */
        get: operations["aca8ea95b45a17cfe2a0442cde2f53ad"];
        /** Update glass */
        put: operations["c9c1cb0561aa1222cc78654eaceb9a62"];
        post?: never;
        /** Delete glass */
        delete: operations["876925de63d0a9bf6b8d2337661f135a"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List uploaded images
         * @description List all images uploaded by the authenticated user
         */
        get: operations["3ac02bbdafb65e59d8b5c6d5aaf9806d"];
        put?: never;
        /**
         * Upload an image
         * @description Used to upload multiple images at once. Uploaded images via this endpoint will not be attached to any resource. Images are converted to WebP format with 85% quality of the original image.
         */
        post: operations["d889115b2fa2ccddce23e39df958cc47"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show an image */
        get: operations["02d07ad762ad36175a8b4c2cdf4eef03"];
        put?: never;
        /** Update image */
        post: operations["18a765565c4f43cc01167738ab8ff7cd"];
        /** Delete image */
        delete: operations["99a6b84660d0881a68e57435afb2e6ea"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images/{id}/thumb": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a thumbnail of an image */
        get: operations["f3fac097ef10296417650431b970d7b3"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/import/cocktail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Import from recipe schema */
        post: operations["f46bb44c14109f5d529b854e81d57150"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/import/scrape": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Scrape a recipe
         * @description Try to scrape a recipe from a website. Most of the well known recipe websites should work. Data returned is a valid JSON schema that you can import using import cocktail endpoint.
         */
        post: operations["33b756be1976d85e9b0e8e734beed74f"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingredient-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a list of ingredient categories */
        get: operations["9c5a332d2fd9a695a6805451249a0c28"];
        put?: never;
        /** Create a new ingredient category */
        post: operations["beef561152a333f7c81fec58a7590f37"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingredient-categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show ingredient category */
        get: operations["cca43ededebdf742491f0f8eb0dcfab5"];
        /** Update ingredient category */
        put: operations["bdd96c56bc078a0dbdbc9cb71b1bd503"];
        post?: never;
        /** Delete ingredient category */
        delete: operations["5190ba80efae47305bdbcf1a68de6fd7"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingredients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a list of ingredients */
        get: operations["1638cf5bb5113e3ca4793347b9ca84ed"];
        put?: never;
        /** Create an ingredient */
        post: operations["efa43043e488624a2f3d8e8123a2d9be"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingredients/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show an ingredient */
        get: operations["0ede5ee7aaed9fd2c985386b7a13e005"];
        /** Update an ingredient */
        put: operations["f9433e9c103e95ceebcf99171a11e81d"];
        post?: never;
        /** Delete an ingredient */
        delete: operations["31e064558b854ed32ba5f29a76aee385"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingredients/{id}/extra": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Extra cocktails you can make if you add this ingredient to your shelf */
        get: operations["ff324ec47870a7091f125afea3f7e664"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingredients/{id}/cocktails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of cocktails that use this ingredient */
        get: operations["aba5fae0baf2ce1fc02a691412c8a6ab"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingredients/{id}/substitutes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List ingredient substitutes
         * @description Show a list of ingredients that are used as a substitute for this ingredient in cocktail recipes.
         */
        get: operations["fccb6b72c41f8a78ab604bc86a879c27"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show menu */
        get: operations["15005db445c5ccad445e198729cc4e22"];
        put?: never;
        /** Update menu */
        post: operations["9ac6e03b541a1351a5d691b2aa232283"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/explore/menus/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show public bar menu */
        get: operations["c2dee2186390212153a41c0527ddb728"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a list of all notes */
        get: operations["8b1d23cbbf81842599e3e9463477cb58"];
        put?: never;
        /** Create a new note */
        post: operations["a0c90a217efa521e80b3b94c1a4bf3a7"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a single note */
        get: operations["c46ec527098402aba4a10b074a7b4047"];
        put?: never;
        post?: never;
        /** Delete a specific note */
        delete: operations["075f33453cc8e1e0d26bd8f07b2c5d59"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a list of tokens */
        get: operations["68b9d61d5bd7070a04356cf10d75f151"];
        put?: never;
        /** Create new personal access token */
        post: operations["d91a0f74be09f52fd56164e7c58e7795"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Revoke personal access token */
        delete: operations["e3638ffac30ab37a8015b26a88b7bad9"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/price-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a list of price categories */
        get: operations["8ffdcf8e07576f57714428563d35c0ff"];
        put?: never;
        /** Create a new price category */
        post: operations["000ce8107dfa5fe811876785a0f24308"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/price-categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a price category */
        get: operations["10017aa4f043f641c210bafc56092997"];
        /** Update price category */
        put: operations["86fc70306463caa72b7bfd33553393be"];
        post?: never;
        /** Delete price category */
        delete: operations["9f109b6442b874b6de95a9b1b400d1fb"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show profile */
        get: operations["73fd658c723e80f927b251628b9a616b"];
        put?: never;
        /** Update profile */
        post: operations["c5958eea850b563b057d22dc8258efbf"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}/ratings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Rate a cocktail */
        post: operations["c7c135615b762420f7b338e0bc744a76"];
        /** Delete current user's cocktail rating */
        delete: operations["93d095c7348ac6ee7d0f3cb8ea1f1c36"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/server/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show server information */
        get: operations["25784e4e494f0fd4dbbdb7b92c301b26"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/ingredients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show a list of shelf ingredients
         * @description Ingredients that user saved to their shelf
         */
        get: operations["b34236369b075eabaacef013be799024"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/cocktails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show a list shelf cocktails
         * @description Cocktails that the user can make with ingredients on their shelf
         */
        get: operations["5a48f072f2ca1f25807838c8ae331db5"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/cocktails/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a list of cocktails user has favorited */
        get: operations["0038cb5730a723a0c58e5605fecb0ccb"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/ingredients/batch-store": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Batch store ingredients to the shelf */
        post: operations["28c0db334504ef005e3704dcc80154b1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/ingredients/batch-delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete multiple ingredients from the shelf */
        post: operations["8effce422c8cbe13a9b273a71f9d8afc"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/ingredients/recommend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recommend next ingredients */
        get: operations["f5e680e7f9f44a047888ad4bc8a22ba8"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/shopping-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show shopping list */
        get: operations["ea114c1013eabd71064b7b33513d13cd"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/shopping-list/batch-store": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Batch add ingredients to shopping list */
        post: operations["c9dbd5fceec4406656e93b94646ea5f6"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/shopping-list/batch-delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Batch delete ingredients from shopping list */
        post: operations["cec5d8ca07890aaad3cd264ba62a88bb"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/shopping-list/share": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Share shopping list */
        get: operations["1d4aaec85e00ac2c559f362058f02056"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show bar stats */
        get: operations["d62319d3bf13005383b7d8027e9056ec"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/billing/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get subscription status */
        get: operations["69a9ec343d37c0baa6b984cac0c06da8"];
        put?: never;
        /** Update subscription */
        post: operations["6b1e9ae3c684b7a71a5ab7348766e6c5"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a list of all tags */
        get: operations["e5e1e0ec136ce6b73c6636ef9635a596"];
        put?: never;
        /** Create a new tag */
        post: operations["436ed7a7115fce5026326a5d67a016ac"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a single tag */
        get: operations["df2e47c29c59436f33f9b36e4b5f30f2"];
        /** Update tag */
        put: operations["3a6faf0d586a666498d08786030214c3"];
        post?: never;
        /** Delete tag */
        delete: operations["3093352bf630017b8fcf7705e9b329c4"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a list of users of a bar */
        get: operations["0d0cb04fffa73faf3be78b1a0b658561"];
        put?: never;
        /** Create a new user */
        post: operations["a53b4f22b9e0de280870f1e187f6bee3"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a user */
        get: operations["89cd377bbebe14aaf4174e3916502852"];
        /** Update a user */
        put: operations["6972a68618aa96af50377dcc8fe79aef"];
        post?: never;
        /** Delete a user */
        delete: operations["0c7e7a133a818ac4b30f2d7dd1b04b91"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/utensils": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a list of utensils */
        get: operations["613e6e2fed96a23278a5036159e9087d"];
        put?: never;
        /** Create a new utensil */
        post: operations["eef2f70636f45820b56cc0025448f847"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/utensils/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show utensil */
        get: operations["1b9d7fe5ecf4a0271c20ba17654d209a"];
        /** Update a specific utensil */
        put: operations["0688a6a8648cdad35503bad732bba86f"];
        post?: never;
        /** Delete specific utensil */
        delete: operations["2f216f7ba27dd48b73ea157501c8bc81"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        BarOptionsEnum: "ingredients" | "cocktails";
        /** @enum {string} */
        ExportTypeEnum: "datapack" | "schema" | "md" | "json-ld" | "xml" | "yaml";
        /** @enum {string} */
        ForceUnitConvertEnum: "none" | "ml" | "oz" | "cl";
        /** @enum {string} */
        DuplicateActionsEnum: "none" | "skip" | "overwrite";
        /** @enum {string} */
        AbilityEnum: "cocktails.read" | "cocktails.write" | "ingredients.read" | "ingredients.write";
        /** @enum {string} */
        BarStatusEnum: "provisioning" | "active" | "deactivated";
        APIError: {
            /** @example api_error */
            type: string;
            /** @example Resource record not found. */
            message: string;
        };
        Bar: {
            /** @example 1 */
            id: number;
            /** @example bar-name-1 */
            slug: string;
            /** @example Bar name */
            name: string;
            /** @example A short subtitle of a bar */
            subtitle: string | null;
            /** @example Bar description */
            description: string | null;
            /** @example 01H8S3VH2HTEB3D893AW8NTBBC */
            invite_code: string | null;
            status: components["schemas"]["BarStatusEnum"];
            settings: {
                [key: string]: unknown;
            }[];
            search_host: string | null;
            search_token: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string | null;
            created_user?: components["schemas"]["UserBasic"];
            updated_user?: components["schemas"]["UserBasic"] | null;
            access: {
                /** @example 1 */
                role_id?: number;
                /** @example true */
                can_edit?: boolean;
                /** @example true */
                can_delete?: boolean;
                /** @example true */
                can_activate?: boolean;
                /** @example true */
                can_deactivate?: boolean;
            }[];
        };
        BarBasic: {
            /** @example 1 */
            id: number;
            /** @example bar-name-1 */
            slug: string;
            /** @example Bar name */
            name: string;
            /** @example Bar subtitle */
            subtitle: string;
        };
        BarMembership: {
            /** @example 1 */
            user_id: number;
            /** @example Bartender */
            user_name: string;
            /** @example 1 */
            bar_id: number;
            /** @example true */
            is_shelf_public: boolean;
            /** @example true */
            use_parent_as_substitute: boolean;
        };
        BarRequest: {
            /** @example Bar name */
            name: string;
            /** @example A short subtitle of a bar */
            subtitle?: string | null;
            /** @example Bar description */
            description?: string | null;
            /** @example bar-name-1 */
            slug?: string;
            /**
             * @description Used only as a setting for client apps.
             * @example ml
             * @enum {string}
             */
            default_units?: "ml" | "cl" | "oz";
            /**
             * @description Locale code, used only as a setting for client apps, does not change language of the API.
             * @example en-US
             */
            default_lang?: string | null;
            /** @description Enable users with invite code to join this bar. Default `false`. */
            enable_invites?: boolean;
            /** @description List of data that the bar will start with. Cocktails cannot be imported without ingredients. */
            options?: ("ingredients" | "cocktails")[];
        };
        BarStats: {
            /** @example 1 */
            total_cocktails: number;
            /** @example 1 */
            total_ingredients: number;
            /** @example 1 */
            total_favorited_cocktails: number;
            /** @example 1 */
            total_shelf_cocktails: number;
            /** @example 1 */
            total_shelf_ingredients: number;
            /** @example 1 */
            total_bar_members: number;
            /** @example 1 */
            total_collections: number;
            favorite_tags: {
                /** @example 31 */
                id: number;
                /** @example Tag name */
                name: string;
                /** @example 12 */
                cocktails_count: number;
            }[];
            your_top_ingredients: {
                /** @example 1 */
                id: number;
                /** @example gin */
                slug: string;
                /** @example Gin */
                name: string;
                /** @example 1 */
                cocktails_count: number;
            }[];
            most_popular_ingredients: {
                /** @example 1 */
                id: number;
                /** @example gin */
                slug: string;
                /** @example Gin */
                name: string;
                /** @example 1 */
                cocktails_count: number;
            }[];
            top_rated_cocktails: {
                /** @example 1 */
                id: number;
                /** @example old-fashioned */
                slug: string;
                /** @example Old Fashioned */
                name: string;
                /** @example 3 */
                avg_rating: number;
                /** @example 42 */
                votes: number;
            }[];
        };
        Cocktail: {
            /** @example 1 */
            id: number;
            /** @example Cocktail name */
            name: string;
            /** @example cocktail-name-1 */
            slug: string;
            /** @example Step by step instructions */
            instructions: string;
            /** @example Garnish */
            garnish: string | null;
            /** @example Cocktail description */
            description: string | null;
            /** @example Source of the recipe */
            source: string | null;
            /** @example public-id-1 */
            public_id: string | null;
            /** Format: date-time */
            public_at: string | null;
            images?: components["schemas"]["Image"][];
            tags?: {
                /** @example 1 */
                id?: number;
                /** @example Tag name */
                name?: string;
            }[];
            rating?: {
                /**
                 * @description Current user's rating
                 * @example 1
                 */
                user: number | null;
                /**
                 * @description Average rating
                 * @example 4
                 */
                average: number;
                /** @example 12 */
                total_votes: number;
            };
            glass?: components["schemas"]["Glass"] | null;
            utensils?: components["schemas"]["Utensil"][];
            ingredients?: components["schemas"]["CocktailIngredient"][];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string | null;
            method?: components["schemas"]["CocktailMethod"] | null;
            /**
             * Format: float
             * @example 40
             */
            abv: number | null;
            /**
             * Format: float
             * @example 67.5
             */
            volume_ml?: number | null;
            /**
             * Format: float
             * @example 25.5
             */
            alcohol_units?: number | null;
            /** @example 350 */
            calories?: number | null;
            created_user?: components["schemas"]["UserBasic"];
            updated_user?: components["schemas"]["UserBasic"] | null;
            in_shelf?: boolean;
            access?: {
                /** @example true */
                can_edit: boolean;
                /** @example true */
                can_delete: boolean;
                /** @example true */
                can_rate: boolean;
                /** @example true */
                can_add_note: boolean;
            };
            navigation?: {
                /** @example old-fashioned-1 */
                prev: string | null;
                /** @example tom-collins-1 */
                next: string | null;
            };
        };
        /** @description Minimal cocktail information */
        CocktailBasic: {
            /** @example 1 */
            id: number;
            /** @example old-fashioned-1 */
            slug: string;
            /** @example Old fashioned */
            name: string;
        };
        CocktailExplore: {
            bar?: components["schemas"]["BarBasic"];
            /** @example Cocktail name */
            name?: string;
            /** @example Step by step instructions */
            instructions?: string;
            /** @example Garnish */
            garnish?: string | null;
            /** @example Cocktail description */
            description?: string | null;
            /** @example Source of the recipe */
            source?: string | null;
            images?: {
                /** @example 1 */
                sort?: number;
                /** @example a1b2c3d4e5f6g7h8i9j0 */
                placeholder_hash?: string;
                /** @example https://example.com/image.jpg */
                url?: string;
                /** @example Image copyright */
                copyright?: string;
            }[];
            tags?: string[];
            glass?: string | null;
            utensils?: string[];
            ingredients?: {
                /** @example Ingredient name */
                name?: string;
                /** @example 30 */
                amount?: number;
                /** @example 45 */
                amount_max?: number | null;
                /** @example ml */
                units?: string;
                /** @example true */
                optional?: boolean;
                /** @example Ingredient note */
                note?: string | null;
                substitutes?: {
                    /** @example Ingredient name */
                    name?: string;
                    /** @example 30 */
                    amount?: number | null;
                    /** @example 45 */
                    amount_max?: number | null;
                    /** @example ml */
                    units?: string | null;
                }[];
            }[];
            method?: string | null;
            /**
             * Format: float
             * @example 40
             */
            abv?: number | null;
        };
        CocktailIngredient: {
            ingredient: components["schemas"]["IngredientBasic"];
            /** @example 0 */
            sort: number;
            /**
             * Format: float
             * @example 30
             */
            amount: number;
            /**
             * Format: float
             * @example 60
             */
            amount_max?: number | null;
            /** @example ml */
            units: string;
            /** @example false */
            optional?: boolean;
            substitutes?: components["schemas"]["CocktailIngredientSubstitute"][];
            /** @example Additional notes */
            note?: string | null;
            /** @description Amounts in different units, converted if possible */
            formatted: {
                ml: {
                    /**
                     * Format: float
                     * @example 30
                     */
                    amount: number;
                    /**
                     * Format: float
                     * @example 60
                     */
                    amount_max: number;
                    /** @example ml */
                    units: string;
                    /** @example 30-60 ml */
                    full_text: string;
                };
                oz: {
                    /**
                     * Format: float
                     * @example 1
                     */
                    amount: number;
                    /**
                     * Format: float
                     * @example 2
                     */
                    amount_max: number;
                    /** @example oz */
                    units: string;
                    /** @example 1-2 oz */
                    full_text: string;
                };
                cl: {
                    /**
                     * Format: float
                     * @example 3
                     */
                    amount: number;
                    /**
                     * Format: float
                     * @example 6
                     */
                    amount_max: number;
                    /** @example cl */
                    units: string;
                    /** @example 3-6 cl */
                    full_text: string;
                };
            } & {
                [key: string]: unknown;
            };
            /** @example true */
            in_shelf?: boolean;
            /** @example true */
            in_shelf_as_substitute?: boolean;
            /** @example true */
            in_shelf_as_complex_ingredient?: boolean;
        };
        CocktailIngredientRequest: {
            ingredient_id: number;
            name?: string | null;
            /**
             * Format: float
             * @example 30
             */
            amount: number;
            /** @example ml */
            units: string;
            sort?: number;
            optional?: boolean;
            substitutes?: components["schemas"]["CocktailIngredientSubstituteRequest"][];
            /**
             * Format: float
             * @example 60
             */
            amount_max?: number | null;
            note?: string | null;
        };
        CocktailIngredientSubstitute: {
            ingredient: components["schemas"]["IngredientBasic"];
            /**
             * Format: float
             * @example 30
             */
            amount: number | null;
            /**
             * Format: float
             * @example 60
             */
            amount_max: number | null;
            /** @example ml */
            units: string | null;
            /** @example true */
            in_shelf: boolean;
        };
        CocktailIngredientSubstituteRequest: {
            ingredient_id: number;
            /**
             * Format: float
             * @example 30
             */
            amount?: number | null;
            /**
             * Format: float
             * @example 60
             */
            amount_max?: number | null;
            /** @example ml */
            units?: string | null;
        };
        CocktailMethod: {
            /** @example 1 */
            id: number;
            /** @example Shake */
            name: string;
            /** @example 20 */
            dilution_percentage: number;
            /** @example 32 */
            cocktails_count: number;
        };
        CocktailMethodRequest: {
            /** @example Shake */
            name: string;
            /** @example 20 */
            dilution_percentage: number;
        };
        CocktailRequest: {
            /** @example Cocktail name */
            name: string;
            /** @example Step by step instructions */
            instructions: string;
            /** @example Cocktail description */
            description?: string | null;
            /** @example Source of the recipe */
            source?: string | null;
            /** @example Garnish */
            garnish?: string | null;
            /** @example 1 */
            glass_id?: number | null;
            /** @example 1 */
            method_id?: number | null;
            tags?: string[];
            ingredients?: components["schemas"]["CocktailIngredientRequest"][];
            /** @description List of existing image ids */
            images?: number[];
            /** @description List of existing utensil ids */
            utensils?: number[];
        };
        Collection: {
            /** @example 1 */
            id: number;
            /** @example Collection name */
            name: string;
            /** @example Collection description */
            description: string | null;
            is_bar_shared: boolean;
            /**
             * Format: date-time
             * @example 2023-05-14T21:23:40.000000Z
             */
            created_at: string;
            created_user?: components["schemas"]["UserBasic"];
            cocktails?: components["schemas"]["CocktailBasic"][];
        };
        CollectionRequest: {
            /** @example Collection name */
            name: string;
            /** @example Collection description */
            description?: string | null;
            is_bar_shared?: boolean;
            cocktails?: number[];
        };
        Export: {
            /** @example 1 */
            id?: number;
            /** @example cocktails.csv */
            filename?: string;
            /**
             * Format: date-time
             * @example 2023-05-14T21:23:40.000000Z
             */
            created_at?: string;
            /** @example Bar name */
            bar_name?: string;
            /** @example true */
            is_done?: boolean;
        };
        ExportRequest: {
            type?: components["schemas"]["ExportTypeEnum"];
            units?: components["schemas"]["ForceUnitConvertEnum"];
            bar_id?: number;
        };
        FileDownloadLink: {
            /**
             * @description Absolute URL to download the export
             * @example http://example.com/api/exports/29/download?t=2053f2e716f2dcddc0a2b767249235750e549af6d459cb1c65d4720e72404d88&e=1723480826
             */
            url?: string;
            /** @example 2053f2e716f2dcddc0a2b767249235750e549af6d459cb1c65d4720e72404d88 */
            token?: string;
            /** @example 2024-08-12T16:40:26+00:00 */
            expires?: string;
        };
        Glass: {
            /** @example 1 */
            id: number;
            /** @example Lowball */
            name: string;
            /** @example Glass for smaller cocktails */
            description: string | null;
            /** @example 32 */
            cocktails_count: number;
            /**
             * Format: float
             * @example 120
             */
            volume: number | null;
            /** @example ml */
            volume_units: string | null;
        };
        GlassRequest: {
            /** @example Lowball */
            name: string;
            /** @example Glass for smaller cocktails */
            description?: string | null;
            /**
             * Format: float
             * @example 120
             */
            volume?: number | null;
            /** @example ml */
            volume_units?: string | null;
        };
        /** @description Image attached to a specific resource */
        Image: {
            /** @example 1 */
            id: number;
            /** @example cocktails/1/image.jpg */
            file_path: string;
            /** @example http://example.com/uploads/cocktails/1/image.jpg */
            url: string;
            /** @example Image copyright */
            copyright: string | null;
            /** @example 1 */
            sort: number;
            /** @example 1QcSHQRnh493V4dIh4eXh1h4kJUI */
            placeholder_hash: string | null;
        };
        ImageRequest: {
            /**
             * Format: binary
             * @description Image file. Base64 encoded images also supported. Max 50MB
             */
            image: string | null;
            /** @description Existing image id, used to update an existing image */
            id?: number | null;
            /** @example 1 */
            sort: number;
            /** @example Image copyright */
            copyright?: string | null;
        };
        Ingredient: {
            /** @example 1 */
            id: number;
            /** @example gin-1 */
            slug: string;
            /** @example Gin */
            name: string;
            /**
             * Format: float
             * @example 40
             */
            strength: number;
            /** @example Gin is a type of alcoholic spirit */
            description: string | null;
            /** @example Worldwide */
            origin: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string | null;
            images?: components["schemas"]["Image"][];
            parent_ingredient?: components["schemas"]["IngredientBasic"] | null;
            /** @example #ffffff */
            color: string;
            category?: components["schemas"]["IngredientCategory"] | null;
            /** @example 12 */
            cocktails_count?: number;
            varieties?: components["schemas"]["IngredientBasic"][];
            cocktails?: {
                /** @example 1 */
                id?: number;
                /** @example old-fashioned-1 */
                slug?: string;
                /** @example Old fashioned */
                name?: string;
            }[];
            created_user?: components["schemas"]["UserBasic"];
            updated_user?: components["schemas"]["UserBasic"] | null;
            access?: {
                /** @example true */
                can_edit?: boolean;
                /** @example true */
                can_delete?: boolean;
            }[];
            ingredient_parts?: components["schemas"]["IngredientBasic"][];
            prices?: components["schemas"]["IngredientPrice"][];
        };
        /** @description Minimal ingredient information */
        IngredientBasic: {
            /** @example 1 */
            id: number;
            /** @example gin-1 */
            slug: string;
            /** @example Gin */
            name: string;
        };
        IngredientCategory: {
            /** @example 1 */
            id: number;
            /** @example Spirits */
            name: string;
            /** @example Category of base spirits */
            description: string | null;
            /** @example 32 */
            ingredients_count: number;
        };
        IngredientCategoryRequest: {
            /** @example Spirits */
            name: string;
            /** @example Category of base spirits */
            description?: string | null;
        };
        IngredientPrice: {
            price_category: components["schemas"]["PriceCategory"];
            price: components["schemas"]["Price"];
            /**
             * Format: float
             * @example 30
             */
            amount: number;
            /** @example ml */
            units: string;
            /** @example Updated price */
            description: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string | null;
        };
        IngredientPriceRequest: {
            price_category_id: number;
            price: number;
            /** Format: float */
            amount: number;
            units: string;
            description?: string | null;
        };
        /** @description Ingredient recommendation with number of potential cocktails */
        IngredientRecommend: components["schemas"]["IngredientBasic"] & {
            /** @example 10 */
            potential_cocktails?: number;
        };
        IngredientRequest: {
            /** @example Gin */
            name: string;
            /** @example 1 */
            ingredient_category_id?: number | null;
            /**
             * Format: float
             * @example 40
             */
            strength?: number;
            /** @example Gin is a type of alcoholic spirit */
            description?: string | null;
            /** @example Worldwide */
            origin?: string | null;
            /** @example #ffffff */
            color?: string | null;
            /** @example 1 */
            parent_ingredient_id?: number | null;
            /** @description Existing image ids */
            images?: number[];
            /** @description Existing ingredient ids */
            complex_ingredient_part_ids?: number[];
            prices?: components["schemas"]["IngredientPriceRequest"][];
        };
        LoginRequest: {
            /** @example admin@example.com */
            email: string;
            /**
             * Format: password
             * @example password
             */
            password: string;
            /** @example My device */
            token_name?: string | null;
        };
        Menu: {
            /** @example 1 */
            id?: number;
            is_enabled?: boolean;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string | null;
            categories?: {
                /** @example Category name */
                name?: string;
                cocktails?: {
                    /** @example 1 */
                    id?: number;
                    /** @example cocktail-name-1 */
                    slug?: string;
                    /** @example 1 */
                    sort?: number;
                    price?: components["schemas"]["Price"];
                    /** @example EUR */
                    currency?: string;
                    /** @example Cocktail name */
                    name?: string;
                    short_ingredients?: string[];
                }[];
            }[];
        };
        MenuExplore: {
            bar?: {
                /** @example Bar name */
                name?: string;
                /** @example Bar subtitle */
                subtitle?: string;
                /** @example Bar description */
                description?: string;
            };
            categories?: {
                /** @example Category name */
                name?: string;
                cocktails?: {
                    /** @example 1 */
                    sort?: number;
                    price?: components["schemas"]["Price"];
                    /** @example 01ARZ3NDEKTSV4RRFFQ69G5FAV */
                    public_id?: string;
                    /** @example cocktail-name-1 */
                    slug?: string;
                    /** @example EUR */
                    currency?: string;
                    /** @example Cocktail name */
                    name?: string;
                    short_ingredients?: string[];
                    /** @example https://example.com/image.jpg */
                    image?: string;
                }[];
            }[];
        };
        MenuRequest: {
            is_enabled: boolean;
            cocktails: {
                /** @example 1 */
                cocktail_id?: number;
                /**
                 * Format: minor
                 * @example 2252
                 */
                price?: number;
                /** @example Category name */
                category_name?: string;
                /** @example 1 */
                sort?: number;
                /**
                 * Format: ISO 4217
                 * @example EUR
                 */
                currency?: string;
            }[];
        };
        Note: {
            /** @example 1 */
            id?: number;
            /** @example Note text */
            note?: string;
            /** @example 1 */
            user_id?: number;
            /**
             * Format: date-time
             * @example 2022-01-01T00:00:00+00:00
             */
            created_at?: string;
        };
        NoteRequest: {
            /** @example Note text */
            note: string;
            /** @example 1 */
            resource_id: number;
            /** @example cocktail */
            resource: string;
        };
        PersonalAccessToken: {
            /** @example 1 */
            id?: number;
            /** @example user_generated */
            name?: string;
            /** @example [
             *       "cocktails.read",
             *       "cocktails.write",
             *       "ingredients.read",
             *       "ingredients.write"
             *     ] */
            abilities?: string[];
            /** @example 2023-05-14T21:23:40.000000Z */
            last_used_at?: string;
            /** @example 2023-05-14T21:23:40.000000Z */
            created_at?: string;
            /** @example 2023-05-14T21:23:40.000000Z */
            expires_at?: string;
        };
        PersonalAccessTokenRequest: {
            /** @example user_generated */
            name?: string | null;
            abilities: components["schemas"]["AbilityEnum"][];
            /** @example 2023-05-14T21:23:40.000000Z */
            expires_at?: string | null;
        };
        Price: {
            /**
             * Format: float
             * @example 13.39
             */
            price: number;
            /** @example 1339 */
            price_minor: number;
            /** @example EUR 13.39 */
            formatted_price: string;
            /** @example EUR */
            currency: string;
        };
        PriceCategory: {
            /** @example 1 */
            id: number;
            /** @example Amazon (DE) */
            name: string;
            /** @example Current price on amazon.de */
            description: string | null;
            /**
             * Format: ISO 4217
             * @example EUR
             */
            currency: string;
            /** @example € */
            currency_symbol?: string;
        };
        PriceCategoryRequest: {
            /** @example Amazon (DE) */
            name: string;
            /** @example Current price on amazon.de */
            description?: string | null;
            /**
             * Format: ISO 4217
             * @example EUR
             */
            currency: string;
        };
        Profile: {
            /** @example 1 */
            id: number;
            /** @example Floral */
            name: string;
            /** @example example@example.com */
            email?: string;
            is_subscribed?: boolean;
            memberships?: components["schemas"]["BarMembership"][];
        };
        ProfileRequest: {
            bar_id?: number | null;
            /** @example Bar Tender */
            name: string;
            /** @example new@email.com */
            email: string;
            /**
             * Format: password
             * @example newpassword
             */
            password?: string | null;
            is_shelf_public?: boolean;
            use_parent_as_substitute?: boolean;
        };
        Rating: {
            /** @example 1 */
            rateable_id?: number;
            /** @example 1 */
            user_id?: number;
            /** @example 3 */
            rating?: number;
        };
        RegisterRequest: {
            /** @example admin@example.com */
            email: string;
            /** @example Bar Tender */
            name: string;
            /**
             * Format: password
             * @example password
             */
            password: string;
        };
        ServerVersion: {
            /** @example 1.0.0 */
            version: string;
            /**
             * @description Latest version available on GitHub
             * @example 3.1.0
             */
            latest_version?: string;
            /** @example true */
            is_latest?: boolean;
            /** @example production */
            type: string;
            /** @example https://search.example.com */
            search_host: string;
            /** @example 1.2.0 */
            search_version: string;
        };
        ShoppingList: {
            ingredient: components["schemas"]["IngredientBasic"];
            /** @example 3 */
            quantity: number;
        };
        ShoppingListRequest: {
            ingredients: {
                id?: number;
                quantity?: number;
            }[];
        };
        Subscription: {
            type?: string;
            paddle_id?: string;
            status?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string | null;
            /** Format: date-time */
            paused_at?: string | null;
            /** Format: date-time */
            ends_at?: string | null;
            past_due?: boolean;
            is_recurring?: boolean;
            next_billed_at?: {
                currency?: string;
                amount?: string;
                /** Format: date-time */
                date?: string;
            }[];
            /** Format: uri */
            update_payment_url?: string;
            /** Format: uri */
            cancel_url?: string;
            transactions?: components["schemas"]["Transaction"][];
        };
        Tag: {
            /** @example 1 */
            id: number;
            /** @example Floral */
            name: string;
            /** @example 12 */
            cocktails_count: number;
        };
        TagRequest: {
            /** @example Floral */
            name: string;
        };
        Token: {
            /** @example 1|dvWHLWuZbmWWFbjaUDla393Q9jK5Ou9ujWYPcvII */
            token?: string;
        };
        Transaction: {
            total?: string;
            tax?: string;
            currency?: string;
            status?: string;
            invoice_number?: string;
            /** Format: uri */
            url?: string;
            /** Format: date-time */
            billed_at?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string | null;
        };
        User: {
            /** @example 1 */
            id?: number;
            /** @example Bartender */
            name?: string;
            /** @example admin@example.com */
            email?: string;
            is_subscribed?: boolean;
            role?: {
                /** @example 1 */
                bar_id?: number;
                /** @example 1 */
                role_id?: number;
                /** @example Admin */
                role_name?: string;
            };
        };
        UserBasic: {
            /** @example 1 */
            id: number;
            /** @example Bartender */
            name: string;
        };
        UserRequest: {
            /** @example 1 */
            role_id: number;
            /** @example admin@example.com */
            email: string;
            /** @example Bar Tender */
            name: string;
            /**
             * Format: password
             * @example password
             */
            password: string;
        };
        UserSubscription: {
            prices: string;
            customer: {
                paddle_id: string;
                paddle_email: string;
                paddle_name: string;
            }[];
            subscription: components["schemas"]["Subscription"] | null;
        };
        Utensil: {
            /** @example 1 */
            id: number;
            /** @example Shaker */
            name: string;
            /** @example Used to shake ingredients */
            description: string | null;
        };
        UtensilRequest: {
            /** @example Shaker */
            name: string;
            /** @example Used to shake ingredients */
            description?: string | null;
        };
        ValidationError: {
            /** @example The cocktail name must be a string. (and 2 more errors) */
            message: string;
            errors: {
                [key: string]: string[];
            };
        };
        /**
         * Cocktail recipe - Draft 02
         * @description Schema for a cocktail recipe including detailed ingredient data. Draft 02 splits ingredients and recipe data.
         */
        "cocktail-02.schema": {
            recipe: {
                /**
                 * Format: slug
                 * @description The unique identifier for a cocktail
                 */
                _id: string;
                /** @description Name of the recipe */
                name: string;
                /** @description Recipe instructions */
                instructions: string;
                /**
                 * Format: date-time
                 * @description Date of recipe
                 */
                created_at?: string | null;
                /** @description Recipe description */
                description?: string | null;
                /** @description Source of the recipe, either URL or Book referece */
                source?: string | null;
                /** @description Cocktail garnish */
                garnish?: string | null;
                /** @description Total ABV of made cocktail */
                abv?: number | null;
                /** @description Short keywords to describe cocktail */
                tags?: string[];
                /** @description Glass type */
                glass?: string | null;
                /** @description Cocktail method */
                method?: string | null;
                /** @description Required utensils */
                utensils?: string[];
                /** @description List of cocktail images */
                images?: {
                    /** Format: uri */
                    uri: string;
                    /** @description Control the representation of the image */
                    sort?: number;
                    /** @description Computed placeholder hash, like thumbhash, blurhash and similar */
                    placeholder_hash?: string | null;
                    /** @description Image copyright information */
                    copyright: string;
                }[];
                /** @description List of cocktail ingredients and substitutes */
                ingredients?: {
                    /** @description The unique reference for an ingredient from `ingredients` property */
                    _id: string;
                    /** @description Amount of the ingredient */
                    amount: number;
                    /** @description Units for the amount */
                    units: string;
                    /** @description Indicates if the ingredient is optional */
                    optional?: boolean;
                    /** @description Maximum amount of the ingredient */
                    amount_max?: number | null;
                    /** @description Additional note related to the cocktail ingredient */
                    note?: string | null;
                    substitutes?: {
                        /** @description The unique reference for an ingredient from `ingredients` property */
                        _id: string;
                        /** @description Amount of the substitute ingredient */
                        amount?: number | null;
                        /** @description Units for the amount */
                        units?: string | null;
                        /** @description Maximum amount of the substitute ingredient */
                        amount_max?: number | null;
                    }[];
                    /** @description Sort order for the ingredient */
                    sort?: number;
                }[];
            };
            /** @description List of ingredients */
            ingredients: {
                /** @description The unique identifier for an ingredient, used as a refrence in cocktail ingredient list */
                _id: string;
                name: string;
                /** @description Ingredient ABV */
                strength?: number | null;
                /** @description Additional ingredient information */
                description?: string | null;
                /** @description Ingredient origin */
                origin?: string | null;
                /** @description Category ingredient belongs to */
                category?: string | null;
            }[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    ff0821f3f5e448e9be30bed07cac39a3: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Token"];
                    };
                };
            };
            /** @description Unable to authenticate */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "7faef09646fa779e3f4eb458d4472c75": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "26578afaf886b858f56e5e1b8fc3403b": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Profile"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "7a6f983e087620ddd905bd4925f83983": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example admin@example.com */
                    email?: string;
                };
            };
        };
        responses: {
            /** @description Password reset link sent */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unable to send password reset link */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "5000f083616176e5a4edc804f813aecc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example token-from-email */
                    token?: string;
                    /** @example admin@example.com */
                    email?: string;
                    /** @example password */
                    password?: string;
                    /** @example password */
                    password_confirmation?: string;
                };
            };
        };
        responses: {
            /** @description Password succssfully reset */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unable to reset password */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "015719985fb92cfb18e9c6a19c82b1db": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a user */
                id: number;
                /** @description Hash string sent to user email */
                hash: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Account confirmed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "8e4aff1910c2f6b973c0bcff7ac77418": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Bar"][];
                    };
                };
            };
        };
    };
    af500d926f43cd1cd146adc9c46f8e41: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BarRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Bar"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Request validation failed. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
        };
    };
    "6e92536f11339d30675019e6e93f9ce4": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Bar"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "06fb0f42934fc2cd15b00b25027494d1": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BarRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Bar"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Request validation failed. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
        };
    };
    dac7d15bfe40981c358d5a52c8a9e31b: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "825a1e86cd76f3ca07ad2f11ea45f648": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example 01H8S3VH2HTEB3D893AW8NTBBC */
                    invite_code?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Bar"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "7a49e26fb4754edae7aa107fd1e35205": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["BarMembership"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    c3986ac9cf5fe6e4090b993e323480ad: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "74df840e62b14107dd9d65b49ed84b27": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
                /** @description Database id of a user */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "208f8a6850027fe0ea9f3b304975fa30": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Database id of a user you want to transfer ownership to
                     * @example 1
                     */
                    user_id?: number;
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "200c1aba9ada2cd66a7d0b7a4ec90a8e": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    status?: components["schemas"]["BarStatusEnum"];
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "4400982243630124406e8675b4632a32": {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
                /** @description Filter by attributes */
                filter?: {
                    id?: string;
                    name?: string;
                    ingredient_name?: string;
                    tag_id?: string;
                    created_user_id?: string;
                    glass_id?: string;
                    cocktail_method_id?: string;
                    collection_id?: string;
                    favorites?: boolean;
                    on_shelf?: boolean;
                    user_shelves?: string;
                    shelf_ingredients?: string;
                    is_public?: boolean;
                    user_rating_min?: string;
                    user_rating_max?: string;
                    average_rating_min?: string;
                    average_rating_max?: string;
                    abv_min?: string;
                    abv_max?: string;
                    main_ingredient_id?: string;
                    total_ingredients?: string;
                    missing_ingredients?: string;
                    specific_ingredients?: string;
                    ignore_ingredients?: string;
                };
                /** @description Sort by attributes. Available attributes: `name`, `created_at`, `average_rating`, `user_rating`, `abv`, `total_ingredients`, `missing_ingredients`, `favorited_at`. */
                sort?: string;
                /** @description Include additional relationships. Available relations: `glass`, `method`, `user`, `navigation`, `utensils`, `createdUser`, `updatedUser`, `images`, `tags`, `ingredients.ingredient`, `ratings`. */
                include?: string;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Cocktail"][];
                        links?: {
                            first?: string | null;
                            last?: string | null;
                            prev?: string | null;
                            next?: string | null;
                        };
                        meta?: {
                            current_page?: number;
                            from?: number;
                            last_page?: number;
                            links?: {
                                url?: string;
                                label?: string;
                                active?: boolean;
                            }[];
                            path?: string;
                            per_page?: number;
                            to?: number;
                            total?: number;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    cbc4c3f93b89c16a916c7cc574ca118e: {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CocktailRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cocktail"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Request validation failed. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
        };
    };
    "9286466f1f4b710e7f06c79f947ec7b0": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id or slug of a resource */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cocktail"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    ca968c657169055c33bc68a1b08b6eaa: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CocktailRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cocktail"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Request validation failed. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
        };
    };
    c642d725c11d12c781fbfad353ba7bcb: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "89742b5d96b9183518a473d9e640db6e": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example true */
                            is_favorited?: boolean;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "191e2ca5633e6d5f7c25430fddbbd9c8": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cocktail"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    a4a90713002827189fef279434f86791: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    c2af4839cdc102afb67b7be674895e8c: {
        parameters: {
            query?: {
                /** @description Share format */
                type?: "json" | "json-ld" | "yaml" | "yml" | "xml" | "text" | "markdown" | "md";
                /** @description Units of measurement */
                units?: string;
            };
            header?: never;
            path: {
                /** @description Database id or slug of a resource */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            /** @example json */
                            type: string;
                            /** @example <content in requested format> */
                            content: string;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "3e08ff7e8e549570aadbaf5b727eaa2a": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cocktail"][];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    d7c826954ef1111d8a897c62e27df861: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id or slug of a resource */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cocktail"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "14008654b6c5780b9e826e4e2fcf237a": {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CocktailMethod"][];
                    };
                };
            };
        };
    };
    "4b70b5048cbee429f002bf3f270c8a94": {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CocktailMethodRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CocktailMethod"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    f1714d10fa6232a1cc65c88929b26bb8: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CocktailMethod"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "7507b8dac0ec7199fc2c229a2c127a4e": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CocktailMethodRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CocktailMethod"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "42b0ceafc9fa786c4984ff1508868ec3": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "308d0156539f4be8f650f7ed64ed3d7f": {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
                /** @description Filter by attributes */
                filter?: {
                    id?: number;
                    name?: string;
                    cocktail_id?: string;
                };
                /** @description Include additional relationships. Available relations: `cocktails`. */
                include?: string;
                /** @description Sort by attributes. Available attributes: `name`, `created_at`. */
                sort?: string;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Collection"][];
                    };
                };
            };
        };
    };
    a2c6fd135d182cbeeadbc042b35b0a80: {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CollectionRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Collection"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    a15fa7e1679d8b4eafed56112a63da76: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Collection"][];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "621b31f704cec7566d650351f0907df6": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id or slug of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Collection"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "7497163b1fe8e97bae47a3904200722a": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CollectionRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Collection"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "00390f2c5b043adc54cc72165bc3eccb": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "934e63129e4bf90dd91eccc108f51f40": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    cocktails?: number[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Collection"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "83841be3da52f7694d8382c5f5b13d8e": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Public cocktail id */
                public_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CocktailExplore"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "5bc2aea6bb7fb81d2a426faccbb4b4d7": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Export"][];
                    };
                };
            };
        };
    };
    "1bedc78fd0edd24fdcc408977166e8cb": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExportRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Export"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "6566cf7c2310f6d0f77d6be65bb36868": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    df14ed9175061d3560c934ca7c89b47a: {
        parameters: {
            query: {
                /** @description Token */
                t: string;
                /** @description Timestamp */
                e: string;
            };
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": unknown;
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "48e1c2637c22de5ec50f90272526b454": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["FileDownloadLink"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    aa68a5da541be756aa65f07353e63cdf: {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
                /** @description Filter by attributes */
                filter?: {
                    name?: string;
                };
                /** @description Sort by attributes. Available attributes: `name`, `created_at`. */
                sort?: string;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Glass"][];
                    };
                };
            };
        };
    };
    b81ce1bc5d5988d9221774a715a90950: {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GlassRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Glass"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    aca8ea95b45a17cfe2a0442cde2f53ad: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Glass"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    c9c1cb0561aa1222cc78654eaceb9a62: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GlassRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Glass"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "876925de63d0a9bf6b8d2337661f135a": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "3ac02bbdafb65e59d8b5c6d5aaf9806d": {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Image"][];
                        links?: {
                            first?: string | null;
                            last?: string | null;
                            prev?: string | null;
                            next?: string | null;
                        };
                        meta?: {
                            current_page?: number;
                            from?: number;
                            last_page?: number;
                            links?: {
                                url?: string;
                                label?: string;
                                active?: boolean;
                            }[];
                            path?: string;
                            per_page?: number;
                            to?: number;
                            total?: number;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    d889115b2fa2ccddce23e39df958cc47: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    images: components["schemas"]["ImageRequest"][];
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Image"][];
                    };
                };
            };
        };
    };
    "02d07ad762ad36175a8b4c2cdf4eef03": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Image"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "18a765565c4f43cc01167738ab8ff7cd": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["ImageRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Image"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "99a6b84660d0881a68e57435afb2e6ea": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    f3fac097ef10296417650431b970d7b3: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "image/jpg": string;
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    f46bb44c14109f5d529b854e81d57150: {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    source?: string;
                    /** @description How to handle duplicates. Cocktails are matched by lowercase name. */
                    duplicate_actions?: components["schemas"]["DuplicateActionsEnum"];
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cocktail"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "33b756be1976d85e9b0e8e734beed74f": {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example https://www.example.com/recipe-url */
                    source?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            /** @example draft2 */
                            schema_version: string;
                            schema: components["schemas"]["cocktail-02.schema"];
                            scraper_meta: {
                                _id: string;
                                source: string;
                            }[];
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "9c5a332d2fd9a695a6805451249a0c28": {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["IngredientCategory"][];
                    };
                };
            };
        };
    };
    beef561152a333f7c81fec58a7590f37: {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IngredientCategoryRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["IngredientCategory"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    cca43ededebdf742491f0f8eb0dcfab5: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["IngredientCategory"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    bdd96c56bc078a0dbdbc9cb71b1bd503: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IngredientCategoryRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["IngredientCategory"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "5190ba80efae47305bdbcf1a68de6fd7": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "1638cf5bb5113e3ca4793347b9ca84ed": {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
                /** @description Filter by attributes */
                filter?: {
                    id?: number;
                    name?: string;
                    name_exact?: string;
                    category_id?: number;
                    origin?: string;
                    created_user_id?: number;
                    on_shopping_list?: boolean;
                    on_shelf?: boolean;
                    /** Format: float */
                    strength_min?: number;
                    /** Format: float */
                    strength_max?: number;
                    main_ingredients?: string;
                    complex?: boolean;
                };
                /** @description Sort by attributes. Available attributes: `name`, `created_at`, `strength`, `total_cocktails`. */
                sort?: string;
                /** @description Include additional relationships. Available relations: `parentIngredient`, `varieties`, `prices`, `ingredientParts`, `category`, `images`. */
                include?: string;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Ingredient"][];
                        links?: {
                            first?: string | null;
                            last?: string | null;
                            prev?: string | null;
                            next?: string | null;
                        };
                        meta?: {
                            current_page?: number;
                            from?: number;
                            last_page?: number;
                            links?: {
                                url?: string;
                                label?: string;
                                active?: boolean;
                            }[];
                            path?: string;
                            per_page?: number;
                            to?: number;
                            total?: number;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    efa43043e488624a2f3d8e8123a2d9be: {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IngredientRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Ingredient"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "0ede5ee7aaed9fd2c985386b7a13e005": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id or slug of a resource */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Ingredient"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    f9433e9c103e95ceebcf99171a11e81d: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IngredientRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Ingredient"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "31e064558b854ed32ba5f29a76aee385": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    ff324ec47870a7091f125afea3f7e664: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CocktailBasic"][];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    aba5fae0baf2ce1fc02a691412c8a6ab: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CocktailBasic"][];
                        links?: {
                            first?: string | null;
                            last?: string | null;
                            prev?: string | null;
                            next?: string | null;
                        };
                        meta?: {
                            current_page?: number;
                            from?: number;
                            last_page?: number;
                            links?: {
                                url?: string;
                                label?: string;
                                active?: boolean;
                            }[];
                            path?: string;
                            per_page?: number;
                            to?: number;
                            total?: number;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    fccb6b72c41f8a78ab604bc86a879c27: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["IngredientBasic"][];
                        links?: {
                            first?: string | null;
                            last?: string | null;
                            prev?: string | null;
                            next?: string | null;
                        };
                        meta?: {
                            current_page?: number;
                            from?: number;
                            last_page?: number;
                            links?: {
                                url?: string;
                                label?: string;
                                active?: boolean;
                            }[];
                            path?: string;
                            per_page?: number;
                            to?: number;
                            total?: number;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "15005db445c5ccad445e198729cc4e22": {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Menu"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "9ac6e03b541a1351a5d691b2aa232283": {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MenuRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Menu"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    c2dee2186390212153a41c0527ddb728: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Bar database slug */
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["MenuExplore"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "8b1d23cbbf81842599e3e9463477cb58": {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Note"][];
                        links?: {
                            first?: string | null;
                            last?: string | null;
                            prev?: string | null;
                            next?: string | null;
                        };
                        meta?: {
                            current_page?: number;
                            from?: number;
                            last_page?: number;
                            links?: {
                                url?: string;
                                label?: string;
                                active?: boolean;
                            }[];
                            path?: string;
                            per_page?: number;
                            to?: number;
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    a0c90a217efa521e80b3b94c1a4bf3a7: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NoteRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Note"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    c46ec527098402aba4a10b074a7b4047: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Note"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "075f33453cc8e1e0d26bd8f07b2c5d59": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "68b9d61d5bd7070a04356cf10d75f151": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PersonalAccessToken"][];
                    };
                };
            };
        };
    };
    d91a0f74be09f52fd56164e7c58e7795: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonalAccessTokenRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Token"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    e3638ffac30ab37a8015b26a88b7bad9: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "8ffdcf8e07576f57714428563d35c0ff": {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PriceCategory"][];
                    };
                };
            };
        };
    };
    "000ce8107dfa5fe811876785a0f24308": {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PriceCategoryRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PriceCategory"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "10017aa4f043f641c210bafc56092997": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PriceCategory"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "86fc70306463caa72b7bfd33553393be": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PriceCategoryRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PriceCategory"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "9f109b6442b874b6de95a9b1b400d1fb": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "73fd658c723e80f927b251628b9a616b": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Profile"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    c5958eea850b563b057d22dc8258efbf: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProfileRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Profile"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    c7c135615b762420f7b338e0bc744a76: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    rating?: number;
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "93d095c7348ac6ee7d0f3cb8ea1f1c36": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "25784e4e494f0fd4dbbdb7b92c301b26": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ServerVersion"];
                    };
                };
            };
        };
    };
    b34236369b075eabaacef013be799024: {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["IngredientBasic"][];
                        links?: {
                            first?: string | null;
                            last?: string | null;
                            prev?: string | null;
                            next?: string | null;
                        };
                        meta?: {
                            current_page?: number;
                            from?: number;
                            last_page?: number;
                            links?: {
                                url?: string;
                                label?: string;
                                active?: boolean;
                            }[];
                            path?: string;
                            per_page?: number;
                            to?: number;
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    "5a48f072f2ca1f25807838c8ae331db5": {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CocktailBasic"][];
                        links?: {
                            first?: string | null;
                            last?: string | null;
                            prev?: string | null;
                            next?: string | null;
                        };
                        meta?: {
                            current_page?: number;
                            from?: number;
                            last_page?: number;
                            links?: {
                                url?: string;
                                label?: string;
                                active?: boolean;
                            }[];
                            path?: string;
                            per_page?: number;
                            to?: number;
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    "0038cb5730a723a0c58e5605fecb0ccb": {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CocktailBasic"][];
                        links?: {
                            first?: string | null;
                            last?: string | null;
                            prev?: string | null;
                            next?: string | null;
                        };
                        meta?: {
                            current_page?: number;
                            from?: number;
                            last_page?: number;
                            links?: {
                                url?: string;
                                label?: string;
                                active?: boolean;
                            }[];
                            path?: string;
                            per_page?: number;
                            to?: number;
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    "28c0db334504ef005e3704dcc80154b1": {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    ingredients?: number[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "8effce422c8cbe13a9b273a71f9d8afc": {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    ingredients?: number[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    f5e680e7f9f44a047888ad4bc8a22ba8: {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["IngredientRecommend"][];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    ea114c1013eabd71064b7b33513d13cd: {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ShoppingList"][];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    c9dbd5fceec4406656e93b94646ea5f6: {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShoppingListRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    cec5d8ca07890aaad3cd264ba62a88bb: {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    ingredients?: {
                        id?: number;
                    }[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "1d4aaec85e00ac2c559f362058f02056": {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
                /** @description Type of share. Available types: `markdown`. */
                type?: string;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            /** @example markdown */
                            type: string;
                            /** @example <content in requested format> */
                            content: string;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    d62319d3bf13005383b7d8027e9056ec: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["BarStats"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "69a9ec343d37c0baa6b984cac0c06da8": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["UserSubscription"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "6b1e9ae3c684b7a71a5ab7348766e6c5": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    type: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    e5e1e0ec136ce6b73c6636ef9635a596: {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Tag"][];
                    };
                };
            };
        };
    };
    "436ed7a7115fce5026326a5d67a016ac": {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Tag"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    df2e47c29c59436f33f9b36e4b5f30f2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Tag"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "3a6faf0d586a666498d08786030214c3": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Tag"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "3093352bf630017b8fcf7705e9b329c4": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "0d0cb04fffa73faf3be78b1a0b658561": {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["User"][];
                    };
                };
            };
        };
    };
    a53b4f22b9e0de280870f1e187f6bee3: {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["User"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "89cd377bbebe14aaf4174e3916502852": {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["User"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "6972a68618aa96af50377dcc8fe79aef": {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["User"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "0c7e7a133a818ac4b30f2d7dd1b04b91": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "613e6e2fed96a23278a5036159e9087d": {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Utensil"][];
                    };
                };
            };
        };
    };
    eef2f70636f45820b56cc0025448f847: {
        parameters: {
            query?: {
                /** @description Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header. */
                bar_id?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UtensilRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Utensil"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "1b9d7fe5ecf4a0271c20ba17654d209a": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Utensil"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "0688a6a8648cdad35503bad732bba86f": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UtensilRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Utensil"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "2f216f7ba27dd48b73ea157501c8bc81": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
}
